"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkUWTQKD35js = require('./chunk-UWTQKD35.js');


var _chunkCGJOXW6Ijs = require('./chunk-CGJOXW6I.js');

// node/plugins/windicss.ts
var _path = require('path');
var _fs = require('fs');
var _utils = require('@antfu/utils');
var _jiti = require('jiti'); var _jiti2 = _interopRequireDefault(_jiti);
async function createWindiCSSPlugin({ themeRoots, addonRoots, clientRoot, userRoot, roots, data }, { windicss: windiOptions }) {
  const { default: WindiCSS } = await Promise.resolve().then(() => require("vite-plugin-windicss"));
  const { defaultConfigureFiles } = await Promise.resolve().then(() => require("@windicss/config"));
  const configFiles = _utils.uniq.call(void 0, [
    ...defaultConfigureFiles.map((i) => _path.resolve.call(void 0, userRoot, i)),
    ...themeRoots.map((i) => `${i}/windi.config.ts`),
    ...addonRoots.map((i) => `${i}/windi.config.ts`),
    _path.resolve.call(void 0, clientRoot, "windi.config.ts")
  ]);
  const configFile = configFiles.find((i) => _fs.existsSync.call(void 0, i));
  let config = _jiti2.default.call(void 0, __filename)(configFile);
  if (config.default)
    config = config.default;
  config = await _chunkUWTQKD35js.loadSetups.call(void 0, roots, "windicss.ts", {}, config, true);
  return WindiCSS(
    {
      configFiles: [configFile],
      config,
      onConfigResolved(config2) {
        if (!config2.theme)
          config2.theme = {};
        if (!config2.theme.extend)
          config2.theme.extend = {};
        if (!config2.theme.extend.fontFamily)
          config2.theme.extend.fontFamily = {};
        const fontFamily = config2.theme.extend.fontFamily;
        fontFamily.sans ||= data.config.fonts.sans.join(",");
        fontFamily.mono ||= data.config.fonts.mono.join(",");
        fontFamily.serif ||= data.config.fonts.serif.join(",");
        return config2;
      },
      onOptionsResolved(config2) {
        themeRoots.forEach((i) => {
          config2.scanOptions.include.push(`${i}/components/**/*.{vue,ts}`);
          config2.scanOptions.include.push(`${i}/layouts/**/*.{vue,ts}`);
        });
        addonRoots.forEach((i) => {
          config2.scanOptions.include.push(`${i}/components/**/*.{vue,ts}`);
          config2.scanOptions.include.push(`${i}/layouts/**/*.{vue,ts}`);
        });
        config2.scanOptions.include.push(`!${_utils.slash.call(void 0, _path.resolve.call(void 0, userRoot, "node_modules"))}`);
        config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkCGJOXW6Ijs.resolveImportPath.call(void 0, "monaco-editor/package.json", true)));
        config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkCGJOXW6Ijs.resolveImportPath.call(void 0, "katex/package.json", true)));
        config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkCGJOXW6Ijs.resolveImportPath.call(void 0, "prettier/package.json", true)));
      },
      ...windiOptions
    }
  );
}



exports.createWindiCSSPlugin = createWindiCSSPlugin;
