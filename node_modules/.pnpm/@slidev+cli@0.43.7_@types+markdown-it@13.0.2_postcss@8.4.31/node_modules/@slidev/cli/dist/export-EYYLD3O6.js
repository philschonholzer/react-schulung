"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkCGJOXW6Ijs = require('./chunk-CGJOXW6I.js');
require('./chunk-YUG22S6W.js');

// node/export.ts
var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var _buffer = require('buffer');
var _fsextra = require('fs-extra'); var _fsextra2 = _interopRequireDefault(_fsextra);
var _kolorist = require('kolorist');
var _cliprogress = require('cli-progress');
var _core = require('@slidev/parser/core');
var _outlinepdf = require('@lillallol/outline-pdf');
var _pdflib = require('pdf-lib'); var pdfLib = _interopRequireWildcard(_pdflib);

function addToTree(tree, info, slideIndexes, level = 1) {
  const titleLevel = info.level;
  if (titleLevel && titleLevel > level && tree.length > 0) {
    addToTree(tree[tree.length - 1].children, info, slideIndexes, level + 1);
  } else {
    tree.push({
      children: [],
      level,
      path: String(slideIndexes[info.index + 1]),
      hideInToc: Boolean(_optionalChain([info, 'access', _ => _.frontmatter, 'optionalAccess', _2 => _2.hideInToc])),
      title: info.title
    });
  }
}
function makeOutline(tree) {
  return tree.map(({ title, path: path2, level, children }) => {
    const rootOutline = title ? `${path2}|${"-".repeat(level - 1)}|${title}` : null;
    const childrenOutline = makeOutline(children);
    return childrenOutline.length > 0 ? `${rootOutline}
${childrenOutline}` : rootOutline;
  }).filter((outline) => !!outline).join("\n");
}
function createSlidevProgress(indeterminate = false) {
  function getSpinner(n = 0) {
    return [_kolorist.cyan.call(void 0, "\u25CF"), _kolorist.green.call(void 0, "\u25C6"), _kolorist.blue.call(void 0, "\u25A0"), _kolorist.yellow.call(void 0, "\u25B2")][n % 4];
  }
  let current = 0;
  let spinner = 0;
  let timer;
  const progress = new (0, _cliprogress.SingleBar)({
    clearOnComplete: true,
    hideCursor: true,
    format: `  {spin} ${_kolorist.yellow.call(void 0, "rendering")}${indeterminate ? _kolorist.dim.call(void 0, _kolorist.yellow.call(void 0, "...")) : " {bar} {value}/{total}"}`,
    linewrap: false,
    barsize: 30
  }, _cliprogress.Presets.shades_grey);
  return {
    bar: progress,
    start(total) {
      progress.start(total, 0, { spin: getSpinner(spinner) });
      timer = setInterval(() => {
        spinner += 1;
        progress.update(current, { spin: getSpinner(spinner) });
      }, 200);
    },
    update(v) {
      current = v;
      progress.update(v, { spin: getSpinner(spinner) });
    },
    stop() {
      clearInterval(timer);
      progress.stop();
    }
  };
}
async function exportNotes({
  port = 18724,
  base = "/",
  output = "notes",
  timeout = 3e4
}) {
  if (!_chunkCGJOXW6Ijs.packageExists.call(void 0, "playwright-chromium"))
    throw new Error("The exporting for Slidev is powered by Playwright, please install it via `npm i -D playwright-chromium`");
  const { chromium } = await Promise.resolve().then(() => require("playwright-chromium"));
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  const progress = createSlidevProgress(true);
  progress.start(1);
  if (!output.endsWith(".pdf"))
    output = `${output}.pdf`;
  await page.goto(`http://localhost:${port}${base}presenter/print`, { waitUntil: "networkidle", timeout });
  await page.waitForLoadState("networkidle");
  await page.emulateMedia({ media: "screen" });
  await page.pdf({
    path: output,
    margin: {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    },
    printBackground: true,
    preferCSSPageSize: true
  });
  progress.stop();
  browser.close();
  return output;
}
async function exportSlides({
  port = 18724,
  total = 0,
  range,
  format = "pdf",
  output = "slides",
  slides,
  base = "/",
  timeout = 3e4,
  dark = false,
  routerMode = "history",
  width = 1920,
  height = 1080,
  withClicks = false,
  executablePath = void 0,
  withToc = false,
  perSlide = false
}) {
  if (!_chunkCGJOXW6Ijs.packageExists.call(void 0, "playwright-chromium"))
    throw new Error("The exporting for Slidev is powered by Playwright, please install it via `npm i -D playwright-chromium`");
  const pages = _core.parseRangeString.call(void 0, total, range);
  const { chromium } = await Promise.resolve().then(() => require("playwright-chromium"));
  const browser = await chromium.launch({
    executablePath
  });
  const context = await browser.newContext({
    viewport: {
      width,
      // Calculate height for every slides to be in the viewport to trigger the rendering of iframes (twitter, youtube...)
      height: perSlide ? height : height * pages.length
    },
    deviceScaleFactor: 1
  });
  const page = await context.newPage();
  const progress = createSlidevProgress(!perSlide);
  async function go(no, clicks) {
    const path2 = `${no}?print${withClicks ? "=clicks" : ""}${clicks ? `&clicks=${clicks}` : ""}${range ? `&range=${range}` : ""}`;
    const url = routerMode === "hash" ? `http://localhost:${port}${base}#${path2}` : `http://localhost:${port}${base}${path2}`;
    await page.goto(url, {
      waitUntil: "networkidle",
      timeout
    });
    await page.waitForLoadState("networkidle");
    await page.emulateMedia({ colorScheme: dark ? "dark" : "light", media: "screen" });
    const elements = page.locator("[data-waitfor]");
    const count = await elements.count();
    for (let index = 0; index < count; index++) {
      const element = elements.nth(index);
      const attribute = await element.getAttribute("data-waitfor");
      if (attribute)
        await element.locator(attribute).waitFor();
    }
    const frames = page.frames();
    await Promise.all(frames.map((frame) => frame.waitForLoadState()));
  }
  async function getSlidesIndex() {
    const clicksBySlide = {};
    const slides2 = page.locator(".print-slide-container");
    const count = await slides2.count();
    for (let i = 0; i < count; i++) {
      const id = await slides2.nth(i).getAttribute("id") || "";
      const path2 = Number(id.split("-")[0]);
      clicksBySlide[path2] = (clicksBySlide[path2] || 0) + 1;
    }
    const slideIndexes = Object.fromEntries(Object.entries(clicksBySlide).reduce((acc, [path2, clicks], i) => {
      acc.push([path2, clicks + (_nullishCoalesce(_optionalChain([acc, 'access', _3 => _3[i - 1], 'optionalAccess', _4 => _4[1]]), () => ( 0)))]);
      return acc;
    }, []));
    return slideIndexes;
  }
  function getClicksFromUrl(url) {
    return _optionalChain([url, 'access', _5 => _5.match, 'call', _6 => _6(/clicks=([1-9][0-9]*)/), 'optionalAccess', _7 => _7[1]]);
  }
  async function genPageWithClicks(fn, i, clicks) {
    await fn(i, clicks);
    if (withClicks) {
      await page.keyboard.press("ArrowRight", { delay: 100 });
      const _clicks = getClicksFromUrl(page.url());
      if (_clicks && clicks !== _clicks)
        await genPageWithClicks(fn, i, _clicks);
    }
  }
  async function genPagePdfPerSlide() {
    const buffers = [];
    const genPdfBuffer = async (i, clicks) => {
      await go(i, clicks);
      const pdf = await page.pdf({
        width,
        height,
        margin: {
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        },
        pageRanges: "1",
        printBackground: true,
        preferCSSPageSize: true
      });
      buffers.push(pdf);
    };
    let idx = 0;
    for (const i of pages) {
      await genPageWithClicks(genPdfBuffer, i);
      progress.update(++idx);
    }
    const mergedPdf = await _pdflib.PDFDocument.create({});
    for (const pdfBytes of buffers) {
      const pdf = await _pdflib.PDFDocument.load(pdfBytes);
      const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
      copiedPages.forEach((page2) => {
        mergedPdf.addPage(page2);
      });
    }
    const buffer = await mergedPdf.save();
    await _fsextra2.default.writeFile(output, buffer);
  }
  async function genPagePdfOnePiece() {
    await go("print");
    const slideIndexes = await getSlidesIndex();
    await page.pdf({
      path: output,
      width,
      height,
      margin: {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      },
      printBackground: true,
      preferCSSPageSize: true
    });
    let pdfData = await _fsextra2.default.readFile(output);
    let pdf = await _pdflib.PDFDocument.load(pdfData);
    const titleSlide = slides[0];
    if (_optionalChain([titleSlide, 'optionalAccess', _8 => _8.title]))
      pdf.setTitle(titleSlide.title);
    if (_optionalChain([titleSlide, 'optionalAccess', _9 => _9.frontmatter, 'optionalAccess', _10 => _10.info]))
      pdf.setSubject(titleSlide.frontmatter.info);
    if (_optionalChain([titleSlide, 'optionalAccess', _11 => _11.frontmatter, 'optionalAccess', _12 => _12.author]))
      pdf.setAuthor(titleSlide.frontmatter.author);
    if (_optionalChain([titleSlide, 'optionalAccess', _13 => _13.frontmatter, 'optionalAccess', _14 => _14.keywords])) {
      if (Array.isArray(_optionalChain([titleSlide, 'optionalAccess', _15 => _15.frontmatter, 'optionalAccess', _16 => _16.keywords])))
        pdf.setKeywords(_optionalChain([titleSlide, 'optionalAccess', _17 => _17.frontmatter, 'optionalAccess', _18 => _18.keywords]));
      else
        pdf.setKeywords(_optionalChain([titleSlide, 'optionalAccess', _19 => _19.frontmatter, 'optionalAccess', _20 => _20.keywords, 'access', _21 => _21.split, 'call', _22 => _22(",")]));
    }
    if (withToc) {
      const outlinePdf = _outlinepdf.outlinePdfFactory.call(void 0, pdfLib);
      const tocTree = slides.filter((slide) => slide.title).reduce((acc, slide) => {
        addToTree(acc, slide, slideIndexes);
        return acc;
      }, []);
      const outline = makeOutline(tocTree);
      pdf = await outlinePdf({ outline, pdf });
    }
    pdfData = _buffer.Buffer.from(await pdf.save());
    await _fsextra2.default.writeFile(output, pdfData);
  }
  async function genPagePngOnePiece() {
    await go("print");
    await _fsextra2.default.emptyDir(output);
    const slides2 = await page.locator(".print-slide-container");
    const count = await slides2.count();
    for (let i = 0; i < count; i++) {
      progress.update(i + 1);
      let id = await slides2.nth(i).getAttribute("id") || "";
      id = withClicks ? id : id.split("-")[0];
      const buffer = await slides2.nth(i).screenshot();
      await _fsextra2.default.writeFile(_path2.default.join(output, `${id}.png`), buffer);
    }
  }
  async function genPagePngPerSlide() {
    const genScreenshot = async (i, clicks) => {
      await go(i, clicks);
      await page.screenshot({
        omitBackground: false,
        path: _path2.default.join(
          output,
          `${i.toString().padStart(2, "0")}${clicks ? `-${clicks}` : ""}.png`
        )
      });
    };
    for (const i of pages)
      await genPageWithClicks(genScreenshot, i);
  }
  function genPagePdf() {
    if (!output.endsWith(".pdf"))
      output = `${output}.pdf`;
    return perSlide ? genPagePdfPerSlide() : genPagePdfOnePiece();
  }
  function genPagePng() {
    return perSlide ? genPagePngPerSlide() : genPagePngOnePiece();
  }
  async function genPageMd(slides2) {
    const files = await _fsextra2.default.readdir(output);
    const mds = files.map((file, i, files2) => {
      const slideIndex = getSlideIndex(file);
      const mdImg = `![${_optionalChain([slides2, 'access', _23 => _23[slideIndex], 'optionalAccess', _24 => _24.title])}](./${_path2.default.join(output, file)})

`;
      if ((i + 1 === files2.length || getSlideIndex(files2[i + 1]) !== slideIndex) && _optionalChain([slides2, 'access', _25 => _25[slideIndex], 'optionalAccess', _26 => _26.note]))
        return `${mdImg}${_optionalChain([slides2, 'access', _27 => _27[slideIndex], 'optionalAccess', _28 => _28.note])}

`;
      return mdImg;
    });
    if (!output.endsWith(".md"))
      output = `${output}.md`;
    await _fsextra2.default.writeFile(output, mds.join(""));
  }
  function getSlideIndex(file) {
    const slideId = file.substring(0, file.indexOf(".")).split("-")[0];
    return Number(slideId) - 1;
  }
  progress.start(pages.length);
  if (format === "pdf") {
    await genPagePdf();
  } else if (format === "png") {
    await genPagePng();
  } else if (format === "md") {
    await genPagePng();
    await genPageMd(slides);
  } else {
    throw new Error(`Unsupported exporting format "${format}"`);
  }
  progress.stop();
  browser.close();
  return output;
}
function getExportOptions(args, options, outDir, outFilename) {
  const config = {
    ...options.data.config.export,
    ...args,
    withClicks: args["with-clicks"],
    executablePath: args["executable-path"],
    withToc: args["with-toc"],
    perSlide: args["per-slide"]
  };
  const {
    entry,
    output,
    format,
    timeout,
    range,
    dark,
    withClicks,
    executablePath,
    withToc,
    perSlide
  } = config;
  outFilename = output || options.data.config.exportFilename || outFilename || `${_path2.default.basename(entry, ".md")}-export`;
  if (outDir)
    outFilename = _path2.default.join(outDir, outFilename);
  return {
    output: outFilename,
    slides: options.data.slides,
    total: options.data.slides.length,
    range,
    format: format || "pdf",
    timeout: _nullishCoalesce(timeout, () => ( 3e4)),
    dark: dark || options.data.config.colorSchema === "dark",
    routerMode: options.data.config.routerMode,
    width: options.data.config.canvasWidth,
    height: Math.round(options.data.config.canvasWidth / options.data.config.aspectRatio),
    withClicks: withClicks || false,
    executablePath,
    withToc: withToc || false,
    perSlide: perSlide || false
  };
}




exports.exportNotes = exportNotes; exports.exportSlides = exportSlides; exports.getExportOptions = getExportOptions;
