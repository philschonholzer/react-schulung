"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// node/plugins/setupNode.ts
var _path = require('path');
var _fsextra = require('fs-extra');
var _utils = require('@antfu/utils');
var _jiti = require('jiti'); var _jiti2 = _interopRequireDefault(_jiti);
function deepMerge(a, b, rootPath = "") {
  a = { ...a };
  Object.keys(b).forEach((key) => {
    if (_utils.isObject.call(void 0, a[key]))
      a[key] = deepMerge(a[key], b[key], rootPath ? `${rootPath}.${key}` : key);
    else if (Array.isArray(a[key]))
      a[key] = [...a[key], ...b[key]];
    else
      a[key] = b[key];
  });
  return a;
}
async function loadSetups(roots, name, arg, initial, merge = true) {
  let returns = initial;
  for (const root of roots) {
    const path = _path.resolve.call(void 0, root, "setup", name);
    if (await _fsextra.pathExists.call(void 0, path)) {
      const { default: setup } = _jiti2.default.call(void 0, __filename)(path);
      const result = await setup(arg);
      if (result !== null) {
        returns = typeof merge === "function" ? merge(returns, result) : merge ? deepMerge(returns, result) : result;
      }
    }
  }
  return returns;
}



exports.loadSetups = loadSetups;
